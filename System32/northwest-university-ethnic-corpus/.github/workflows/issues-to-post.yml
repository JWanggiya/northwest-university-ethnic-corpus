name: Convert Issue to Post

on:
  issues:
    types: [labeled]

jobs:
  convert:
    if: github.event.label.name == 'new-entry'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Parse issue and create post
        id: parse
        run: |
          # 获取 issue 内容
          ISSUE_NUMBER=${{ github.event.issue.number }}
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          # 解析内容
          TITLE=$(echo "$ISSUE_TITLE" | tr -d '\n')
          DATE=$(date +%Y-%m-%d)
          FILENAME="_posts/corpus/${DATE}-$(echo "$TITLE" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]- ' | tr ' ' '-').md"
          
          # 提取字段
          CONTENT=$(echo "$ISSUE_BODY" | sed -n '/### 词条信息/,/### 图片链接/p' | grep -v '### ')
          IMAGE=$(echo "$ISSUE_BODY" | grep '### 图片链接' -A1 | tail -1 | sed 's/^- //')
          VIDEO=$(echo "$ISSUE_BODY" | grep '### 视频链接' -A1 | tail -1 | sed 's/^- //')
          INITIAL=$(echo "$TITLE" | head -c 1 | tr '[:lower:]' '[:upper:]')
          
          # 创建 YAML 头部
          YAML="---\ntitle: $TITLE\ninitial: $INITIAL\ndate: $(date +'%Y-%m-%d %H:%M:%S')\nimage: $IMAGE\nvideo: $VIDEO\nlayout: corpus\n---\n\n$CONTENT"
          
          # 写入文件
          echo -e "$YAML" > "$FILENAME"
          echo "post_file=$FILENAME" >> $GITHUB_ENV
          
      - name: Commit and push
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add ${{ env.post_file }}
          git commit -m "Add new entry: ${{ github.event.issue.title }}"
          git push
          
      - name: Close issue
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '感谢贡献！您的词条已添加到语料库。'
            })
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            })

